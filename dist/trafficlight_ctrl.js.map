{"version":3,"sources":["../src/trafficlight_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","TimeSeries","panelDefaults","bgColor","trafficLightSettings","lightsPerLine","width","invertScale","showValue","redThreshold","greenThreshold","max","fontSize","TrafficLightCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onRender","onDataReceived","onDataError","percentPerLight","data","updateTraffics","series","console","log","dataList","map","seriesHandler","newseries","i","length","newserie","label","datapoints","slice","push","JSON","stringify","orderBy","seriesData","alias","target","addEditorTab","$timeout","cancel","nextTickPromise","lines","metrics","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":"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","file":"trafficlight_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series';\n\nimport './css/trafficlight-panel.css!';\n\nconst panelDefaults = {  \n  bgColor: null  \n  ,trafficLightSettings:\n  { \n    lightsPerLine:5,\n    width:20,\n    invertScale:false,\n    showValue:true,\n    redThreshold:80,\n    greenThreshold:20,\n    max:100,\n    fontSize:'12px'\n  }\n};\n\nexport class TrafficLightCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    this.percentPerLight=100;\n\n    this.data=[]\n    this.updateTraffics();\n  }\n\n\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onRender() {\n    //this.data = this.parseSeries(this.series);\n    console.log(\"On Render\");\n  }\n\n\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    \n    var newseries=[]\n    for(var i =0;i<this.series.length;i++)\n    {\n      var newserie={\n        \"name\":this.series[i].label,\n        \"value\":this.series[i].datapoints.slice(-1)[0][0]\n      }\n      newseries.push(newserie);\n    }\n    console.log(JSON.stringify(newseries));\n    \n    if(this.panel.trafficLightSettings.invertScale)\n      this.data=_.orderBy(newseries, 'value','desc');\n    else\n      this.data=_.orderBy(newseries, 'value','asc');\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n    return series;\n  }\n\n  onInitEditMode() {\n    \n    this.addEditorTab('Options', 'public/plugins/grafana-traffic-lights/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  updateTraffics() {\n    this.percentPerLight=100/this.panel.trafficLightSettings.lightsPerLine;\n    \n    this.lines=[];\n    var metrics=[];\n    for(var i=0;i<this.data.length;i++)\n    {\n      if((i%this.panel.trafficLightSettings.lightsPerLine)==0)\n\t\t\t{\n\t\t\t\tmetrics=[];\n\t\t\t\tthis.lines.push(metrics);\n      }\n      metrics.push(this.data[i]);\n    }\n    this.nextTickPromise = this.$timeout(this.updateTraffics.bind(this), 1000);\n  }\n\n  \n\n\n\n  \n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nTrafficLightCtrl.templateUrl = 'module.html';\n"]}